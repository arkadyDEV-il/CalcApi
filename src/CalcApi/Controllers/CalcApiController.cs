/*
 * Calculator API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using CalcApi.Attributes;
using CalcApi.Models;

namespace CalcApi.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CalcApiController : ControllerBase
    {
        /// <summary>
        /// Perform an arithmetic operation on two numbers
        /// </summary>
        /// <param name="xOp">The arithmetic operation to perform</param>
        /// <param name="calcRequest"></param>
        /// <response code="200">Successful calculation</response>
        /// <response code="400">Invalid input (e.g., bad header value, division by zero)</response>
        /// <response code="401">Unauthorized (missing/invalid JWT)</response>
        [HttpPost]
        [Route("/calc")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CalcPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(CalcResponse), description: "Successful calculation")]
        public virtual IActionResult CalcPost([FromHeader(Name = "X-Op")][Required()] string xOp, [FromBody] CalcRequest calcRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //string exampleJson = null;
            //exampleJson = "{\r\n  \"result\" : 0.8008281904610115\r\n}";


            //var example = exampleJson != null
            //? JsonConvert.DeserializeObject<CalcResponse>(exampleJson)
            //: default;
            //TODO: Change the data returned

        


            return CalcResult(xOp, calcRequest);
        }


        private IActionResult CalcResult(string xOp, CalcRequest calcRequest)
        {
            try
            {
                switch (xOp)
                {
                    case "add": return new ObjectResult(new CalcResponse { Result = calcRequest.Number1 + calcRequest.Number2 });
                    case "sub": return new ObjectResult(new CalcResponse { Result = calcRequest.Number1 - calcRequest.Number2 });
                    case "mul": return new ObjectResult(new CalcResponse { Result = calcRequest.Number1 * calcRequest.Number2 });
                    case "div": return new ObjectResult(new CalcResponse { Result = calcRequest.Number1 / calcRequest.Number2 });
                    default: return BadRequest();
                }
                
               
            }catch(Exception ex)
            {
                //TODO - write to log
                return BadRequest(ex.Message);
            }
        }
    }
}
